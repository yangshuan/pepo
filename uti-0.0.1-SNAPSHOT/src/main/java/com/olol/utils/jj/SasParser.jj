/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 * @author: fatu
 */options{  JDK_VERSION = "1.6";  LOOKAHEAD= 2;  static = true;}PARSER_BEGIN(SasParser)package com.olol.utils.jj;import java.util.ArrayList;import java.util.List;import java.io.File;import java.io.IOException;import java.io.InputStream;import org.springframework.core.io.ClassPathResource;public class SasParser{  public static int count = 0;  public static List < String > variables = new ArrayList < String > ();  static class IfStatement  {    String varName;    String woeName;    String statement;  }  public static String charTrim(String str)  {    return str.substring(1, str.length() - 1);  }  public static void parseSas(String path)  {    InputStream input;    try    {      File sasFile = new ClassPathResource(path).getFile();      input = new java.io.FileInputStream(sasFile);    }    catch (IOException e)    {      System.out.println("File not found.");      return;    }    try    {      SasParser parser = new SasParser(input);      parser.translation_unit();    }    catch (ParseException e)    {      e.printStackTrace();    }  }  public static void main(String args [])  {    InputStream input;    try    {      File woeFile = new ClassPathResource("variables.woe").getFile();      input = new java.io.FileInputStream(woeFile);    }    catch (IOException e)    {      System.out.println("File not found.");      return;    }    try    {      SasParser parser = new SasParser(input);      parser.translation_unit();    }    catch (ParseException e)    {      e.printStackTrace();    }  }}PARSER_END(SasParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      "*"    | ~[ "*", "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* Numeric */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])? >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >| < FLOATING_POINT_LITERAL :    ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)? ([ "f", "F", "d", "D" ])?  | "." ([ "0"-"9" ])+ (< EXPONENT >)? ([ "f", "F", "d", "D" ])?  | ([ "0"-"9" ])+ < EXPONENT > ([ "f", "F", "d", "D" ])?  | ([ "0"-"9" ])+ (< EXPONENT >)? [ "f", "F", "d", "D" ] >| < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >| < CHARACTER_LITERAL :    "\'"    (      ~[ "\'", "\\", "\n", "\r" ]    | "\\"      (        [ "n", "t", "b", "r", "f", "\\", "\'", "\"" ]      | [ "0"-"7" ] ([ "0"-"7" ])?      | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]      )    )*    "\'" >| < STRING_LITERAL :    "\""    (      ~[ "\"", "\\", "\n", "\r" ]    | "\\"      (        [ "n", "t", "b", "r", "f", "\\", "\'", "\"" ]      | [ "0"-"7" ] ([ "0"-"7" ])?      | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]      |        (          [ "\n", "\r" ]        | "\r\n"        )      )    )*    "\"" >}TOKEN :{  < CONTINUE : "continue" >| < VOLATILE : "volatile" >| < REGISTER : "register" >| < IF : "if" >| < ELSE : "else" >| < THEN : "then" >| < IN : "in" >| < LABEL : "label" >}TOKEN : /* OPERATORS */{  < LCURLYBRACE : "{" >| < RCURLYBRACE : "}" >| < LSQUAREBRACKET : "[" >| < RSQUAREBRACKET : "]" >| < LPARENTHESIS : "(" >| < RPARENTHESIS : ")" >| < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >| < EQUAL : "==" >| < NOTEQUAL : "!=" >| < LESSTHAN : "<" >| < GREATERTHAN : ">" >| < LESSTHANOREQUALTO : "<=" >| < GREATERTHANOREQUALTO : ">=" >}TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >| < #DIGIT : [ "0"-"9" ] >}void translation_unit() :{}{  (    LOOKAHEAD(2)    external_declaration()  )*  < EOF >}void external_declaration() :{  StringBuilder sb = new StringBuilder();  String str;  IfStatement ifstatement = new IfStatement();}{  ifstatement = if_statement()  {    sb.append(ifstatement.statement + "\n");  }  (    str = elseif_statement()    {      sb.append(str + "\n");    }  )*  str = else_statement()  {    sb.append(str);  }  (    label_statement()  )*  {    count++;    variables.add(ifstatement.varName.toUpperCase());    if (count == 1)     System.out.println("if(" + ifstatement.varName.toUpperCase() + ".getName().equals(varName)){");    else     System.out.println("else if(" + ifstatement.varName.toUpperCase() + ".getName().equals(varName)){");    System.out.println(sb);    System.out.println("woeMap.put(\"" + ifstatement.woeName + "\", woeValue);");    System.out.println("}");  }}IfStatement if_statement() :{  Token flag = new Token();  Token t;  Token value;  StringBuilder sb = new StringBuilder();  String str;  IfStatement ifstatement = new IfStatement();}{  < IF >   str = var_indentifier()  {    sb.append("if ");    ifstatement.varName = str;  }  (    "="    (      t = < CHARACTER_LITERAL >      {        sb.append("(value.equals(\"" + charTrim(t.toString()).trim() + "\"))");      }    | t = "."      {        sb.append("(value == null)");      }    )  | str = stringvalue_desc()    {      sb.append("(" + str + ")");    }  )  "then" str = var_indentifier() "="  {    sb.append(" woeValue").append(" = ");    ifstatement.woeName = str;  }  (flag = "-")?   value = < FLOATING_POINT_LITERAL > ";"  {    if (flag.toString() != null && flag.toString().trim().equals("-"))    {      sb.append(flag.toString() + value.toString());    }    else    {      sb.append(value.toString());    }    {      sb.append(";");      ifstatement.statement = sb.toString();    }    return ifstatement;  }}String elseif_statement() :{  StringBuilder sb = new StringBuilder();  String str;  Token t;}{  < ELSE > < IF >  {    sb.append("else if ");  }  (    str = var_indentifier()    (      str = digitvalue_desc()      {        sb.append("(" + str + ")");      }    | str = stringvalue_desc()      {        sb.append("(" + str + ")");      }    )  | < LPARENTHESIS >     str = digitvalue_desc()     < RPARENTHESIS >    {      sb.append("(" + str + ")");    }  )  "then" str = var_indentifier() "="  {    sb.append(" woeValue = ");  }  (    "-"    {      sb.append("-");    }  )?  t = < FLOATING_POINT_LITERAL >  {    sb.append(t.toString());  }  ";"  {    sb.append(";");  }  {    return sb.toString();  }}String else_statement() :{  String str;  Token t;  StringBuilder sb = new StringBuilder();}{  < ELSE > str = var_indentifier() "="  {    sb.append("else woeValue = ");  }  (    "-"    {      sb.append("-");    }  )?  (    t = < FLOATING_POINT_LITERAL >  | t = < INTEGER_LITERAL >  )  {    sb.append(t.toString());  }  ";"  {    sb.append(";");  }  {    return sb.toString();  }}void label_statement() :{}{  < LABEL > var_indentifier() "=" < CHARACTER_LITERAL > ";"}String var_indentifier() :{  Token t;}{  t = < IDENTIFIER >  {    return t.toString();  }}String digitvalue_desc() :{  StringBuilder sb = new StringBuilder();  String str;  Token t;}{  (    "=" "."    {      sb.append(" = . ");    }  | str = var_indentifier()     < GREATERTHAN >    {      sb.append(" valueDouble > ");    }    (      "-"      {        sb.append("-");      }    )?    (      t = < INTEGER_LITERAL >      {        sb.append(t.toString());      }    | t = < FLOATING_POINT_LITERAL >      {        sb.append(t.toString());      }    )  |    (      "."      {        sb.append("");      }    |      (        t = "-"        {          sb.append("-");        }      )?      (        t = < INTEGER_LITERAL >      | t = < FLOATING_POINT_LITERAL >      )      {        sb.append(t.toString() + " < valueDouble &&");      }    )    < LESSTHAN > str = var_indentifier() < LESSTHANOREQUALTO >    {      sb.append(" valueDouble <= ");    }    (      "-"      {        sb.append("-");      }    )?    (      t = < INTEGER_LITERAL >      {        sb.append(t.toString());      }    | t = < FLOATING_POINT_LITERAL >      {        sb.append(t.toString());      }    )  )  {    return sb.toString();  }}String stringvalue_desc() :{  StringBuilder sb = new StringBuilder();  Token t;}{  (    "=" t = < CHARACTER_LITERAL >    {      sb.append(" (value.equals(" + "\"" + charTrim(t.toString()).trim() + "\"" + ")) ");    }  | < IN > < LPARENTHESIS >    {      sb.append("Arrays.asList( ");    }    t = < CHARACTER_LITERAL >    {      sb.append("\"" + charTrim(t.toString()).trim() + "\"");    }    (      ","      {        sb.append(",");      }      (        t = < CHARACTER_LITERAL >        {          sb.append("\"" + charTrim(t.toString()).trim() + "\"");        }      | t = < STRING_LITERAL >        {          sb.append("\"" + charTrim(t.toString()).trim() + "\"");        }      )    )*    < RPARENTHESIS >    {      sb.append(")" + ".contains(value) ");    }  )  {    return sb.toString().trim();  }}
