/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 * @author: fatu
 */options{  JDK_VERSION = "1.6";  LOOKAHEAD= 3;
//  FORCE_LA_CHECK = true;  static = false;}PARSER_BEGIN(SasParser)package com.olol.model.gen.parser;

import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import org.springframework.core.io.ClassPathResource;public class SasParser{
  public int count = 0;
  public static List<String> variables = new ArrayList<String>();
  public HashMap<String, String> varMap = new HashMap<String, String>();
  public HashMap<String, String> woeMap = new HashMap<String, String>();
  public HashMap<String, String> typeMap = new HashMap<String, String>();
  public static String name;
  public StringBuilder coeffmapsb = new StringBuilder();
  public StringBuilder varaddsb = new StringBuilder();
  public static String coeff1 = "";
  public static String coeff2 = "";

  static class IfStatement  {
    String varName;
    String woeName;
    String statement;
    String type;
    Boolean isMissHandler;
  }

  public static String charTrim(String str)
  {
    return str.substring(1, str.length() - 1);
  }

  public HashMap<String, String> parse(String filepath)
  {
    HashMap<String, String> varMap = new HashMap<String, String>();
    InputStream input = null;
    try
    {
      //File sasFile = new ClassPathResource(filepath).getFile();
      File sasFile = new File(filepath);
      input = new java.io.FileInputStream(sasFile);
    }
    catch (IOException e)
    {
      System.out.println("File not found.");
    }
    
    try
    {
      SasParser parser = new SasParser(input);
      parser.translation_unit();
    }
    catch (ParseException e)
    {
      e.printStackTrace();
    }
    count = 0;
    return varMap;
  }

  public void setWoeMap(HashMap<String, String> woeMap)  {	this.woeMap = woeMap;
  }
  }PARSER_END(SasParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      "*"    | ~[ "*", "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* Numeric */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])? >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >| < FLOATING_POINT_LITERAL :    ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)? ([ "f", "F", "d", "D" ])?  | "." ([ "0"-"9" ])+ (< EXPONENT >)? ([ "f", "F", "d", "D" ])?  | ([ "0"-"9" ])+ < EXPONENT > ([ "f", "F", "d", "D" ])?  | ([ "0"-"9" ])+ (< EXPONENT >)? [ "f", "F", "d", "D" ] >| < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >| < CHARACTER_LITERAL :    "\'"    (      ~[ "\'", "\\", "\n", "\r" ]    | "\\"      (        [ "n", "t", "b", "r", "f", "\\", "\'", "\"" ]      | [ "0"-"7" ] ([ "0"-"7" ])?      | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]      )    )*    "\'" >| < STRING_LITERAL :    "\""    (      ~[ "\"", "\\", "\n", "\r" ]    | "\\"      (        [ "n", "t", "b", "r", "f", "\\", "\'", "\"" ]      | [ "0"-"7" ] ([ "0"-"7" ])?      | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]      |        (          [ "\n", "\r" ]        | "\r\n"        )      )    )*    "\"" >}TOKEN :{  < CONTINUE : "continue" >| < VOLATILE : "volatile" >| < REGISTER : "register" >| < IF : "if" >| < ELSE : "else" >| < THEN : "then" >
| < OR : "or" >
| < IN : "in" >
| < LABEL : "label" >
| < INTERCEPT : "intercept" >}TOKEN : /* OPERATORS */{
  < LCURLYBRACE: "{" >
| < RCURLYBRACE: "}" >
| < LSQUAREBRACKET: "[" >
| < RSQUAREBRACKET: "]" >
| < LPARENTHESIS: "(" >
| < RPARENTHESIS: ")" >| < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >
| < EQUAL: "==" >
| < NOTEQUAL: "!=" >
| < LESSTHAN: "<" >
| < GREATERTHAN: ">" >
| < LESSTHANOREQUALTO: "<=" >
| < GREATERTHANOREQUALTO: ">=" >}TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >| < #DIGIT : [ "0"-"9" ] >}void translation_unit() :{
}{
  ( LOOKAHEAD(2) external_declaration() )* <EOF>}

void external_declaration() :
{
  StringBuilder sb = new StringBuilder();
  String str = null;
  IfStatement ifstatement = new IfStatement();}
{    (  (      ifstatement = if_statement()
      
  {        sb.append(ifstatement.statement + "\n");
  }
  (
     str = elseif_statement(ifstatement)
     {       sb.append(str + "\n");     }
  ) *
  (       str = else_statement(ifstatement)
 )
  {
       sb.append(str);
       if (!ifstatement.isMissHandler) sb.insert(0,ifstatement.statement+"\n");
       typeMap.put(ifstatement.varName,ifstatement.type);
  }
  (    label_statement()
  )*
) |
  (
    scorecard()  )
)
  {    count++;
    variables.add(ifstatement.varName);
    if (count == 1)
      varaddsb.append("if(" + ifstatement.varName + ".getName().equals(varName)){\n");
    else
      varaddsb.append("else if(" + ifstatement.varName + ".getName().equals(varName)){\n");
    varaddsb.append(sb);
	
    varaddsb.append("\n}");
  }}

IfStatement if_statement() :
{
  Token flag = new Token();
  Token t = null;
  Token value;
  StringBuilder sb = new StringBuilder();
  StringBuilder getsegmentvarsb = new StringBuilder();
  StringBuilder getsegmentlogicsb = new StringBuilder();
  String varname;
  String str;
  IfStatement ifstatement = new IfStatement();
}
{
  
  < IF >
 (  (     
  str = var_indentifier()
  {
    varname = str +"_result";	
	ifstatement.varName = str;
	getsegmentvarsb.append("Integer " + str +"_result = Contexts.execute(ctxt, " + str + ", null);\n" );
  }
  ( 
    "="  (
          (          { sb.append("else if "); ifstatement.isMissHandler = false;}                    t = <CHARACTER_LITERAL>
//          { sb.append("(value.equals(\""+charTrim(t.toString()).trim()+"\"))"); }
          { sb.append("(Arrays.asList(\""+charTrim(t.toString()).trim()+"\").contains(value))"); }
        )
         | t = "."
          { sb.append("if (value == null)"); ifstatement.isMissHandler = true;}
         |  { sb.append("else if (valueDouble == "); }        
         ("-" { sb.append("-"); } )?  t = < INTEGER_LITERAL > 
          { getsegmentlogicsb.append("else if (" + varname + "==" + t);
			sb.append(t + ")");
            ifstatement.isMissHandler = false;}
        | { sb.append("else if (valueDouble == "); }
        ("-" { sb.append("-"); } )? t = < FLOATING_POINT_LITERAL >
          { sb.append(t + ")"); ifstatement.isMissHandler = false;}
          
         )
  | str = stringvalue_desc(ifstatement)
    {
      sb.append("else if (" + str +")"); ifstatement.isMissHandler = false;
    }
  )
  (    < OR >
    {
      varMap.put(str, t.toString());    }
    str = var_indentifier()
    {
      varname = str + "_result";      getsegmentvarsb.append("Integer " + str+"_result = Contexts.execute(ctxt, " + str + ", null);\n" );
  	}
    "="
    t = < INTEGER_LITERAL >
    {
      getsegmentlogicsb.append("|| " + varname + "==" + t + ") {\n");
      getsegmentlogicsb.append("return new SessionSegment1(); \n}else{\n");
      getsegmentlogicsb.append("return new SessionSegment2(); \n}");       varMap.put("getsegment", getsegmentvarsb.toString()+ getsegmentlogicsb.toString());
    }
  )*
)
|	(
	  { sb.append("else if ("); }
	  (< MINUS >)?  { sb.append("-"); }
	  (
	    t = < FLOATING_POINT_LITERAL >
	  | t = < INTEGER_LITERAL >
	  )
	  < LESSTHAN >
	  str = var_indentifier(){ ifstatement.varName = str; }
	  < LESSTHANOREQUALTO >
	  { sb.append( t.toString().trim() + " < valueDouble && valueDouble <= "); }
	  (< MINUS >)? { sb.append("-"); }
	  (	    t = < FLOATING_POINT_LITERAL >
	  | t = < INTEGER_LITERAL >
	  )
	  { if(Double.valueOf(t.toString()) >= 2147483648D)sb.append(t.toString().trim() + "D)");
	    else  sb.append(t.toString().trim() + ")");}	)  {	ifstatement.isMissHandler = false;  }
)

{
  	varname = str +"_result";
//	ifstatement.varName = str;}

  
  "then" str = var_indentifier() "="
  {
    sb.append(" woeValue").append(" = ");
    ifstatement.woeName = str;
    woeMap.put(ifstatement.woeName, ifstatement.varName);  }
  ( flag = "-" )?
  (        value = <FLOATING_POINT_LITERAL> |
    value = < INTEGER_LITERAL >
   )
    ";"
  
  {
    if (flag.toString() != null && flag.toString().trim().equals("-"))    {            sb.append( flag.toString() + value.toString() );
    } else    {	  sb.append( value.toString() );  
    }
    {
      sb.append(";");      ifstatement.statement = sb.toString();    }    
  	return ifstatement;    }
}

String scorecard() :
{
  StringBuilder sb = new StringBuilder();
  String str;
  Token t;}
{

  <IDENTIFIER> "=" (coeff())+ ";"

  <IDENTIFIER> "=" <IDENTIFIER> "("
 t = < FLOATING_POINT_LITERAL >
{
  coeff1 = t.toString();}
  "+" "(" "-"
  t = < FLOATING_POINT_LITERAL > 
{
  coeff2 ="-" + t.toString();
}
 ")"  "*" "("
<IDENTIFIER>
")" ")"
";"
  {
    return sb.toString();  }}

String coeff() :
{
  String var = "";
  Token sign ;
  String value = "";
  Token t;}
{
(  sign = "+"
| sign = "-"
)
  
"("
t = < FLOATING_POINT_LITERAL >
< MULTIPLY >
(  var = var_indentifier()
)

")"



  {
    if (var.equals("Intercept"))
    coeffmapsb.append("coeffMap.put(\"Intercept\"," + sign.toString() + t.toString() + ");\n");
    else coeffmapsb.append("coeffMap.put("+woeMap.get(var)+".getName()," + sign.toString() + t.toString() + ");\n");
    return null;  }}

String elseif_statement(IfStatement ifstatement) :
{
  StringBuilder sb = new StringBuilder();
  String str;
  Token t;
}
{
  < ELSE > < IF >
  { sb.append("else if "); }
  (
      str = var_indentifier() { ifstatement.varName=str; }
	  (
	    str = digitvalue_desc() { sb.append("(" + str +")"); ifstatement.type="numeric";}
	  | str = stringvalue_desc(ifstatement) { sb.append("(" + str +")"); }	
	  )
| (< LPARENTHESIS >)?
   str = digitvalue_desc()
  (< RPARENTHESIS >)?
  { sb.append("(" + str +")");ifstatement.type="numeric";}
  
  )
  "then" str = var_indentifier() "="
  { sb.append(" woeValue = "); }
  ( "-" { sb.append("-"); })?
  t = <FLOATING_POINT_LITERAL>
  { sb.append(t.toString()); } 
  ";"
  { sb.append(";"); }
{  return sb.toString();
}
}

String else_statement(IfStatement ifstatement) :
{
  String str;
  Token t;
  StringBuilder sb = new StringBuilder();
  String value = "";
}
{
  < ELSE > str = var_indentifier()  "="
  { sb.append("else woeValue = "); }
  ( "-" { sb.append("-"); value = "-";})?
  ( t = <FLOATING_POINT_LITERAL>
  | t = < INTEGER_LITERAL > )
  { sb.append(t.toString()); value += t.toString();}
  ";"
  { sb.append(";"); }
  {
  ifstatement.statement = "if (value==null) woeValue = " + value + ";";
  return sb.toString();
  }
}

void label_statement() :
{}
{  < LABEL > var_indentifier() "=" < CHARACTER_LITERAL > ";"
}


String var_indentifier() :
{
  Token t;}
{
  t = < IDENTIFIER >

  {	return t.toString();
  }
}

String digitvalue_desc() :
{
  StringBuilder sb = new StringBuilder();
  String str;
  Token t;}{
(   "=" "."
   { sb.append(" = . "); }
| str = var_indentifier()
   < GREATERTHAN >
 { sb.append(" valueDouble > "); }
  ("-" { sb.append("-"); } )?
  (
    t = < INTEGER_LITERAL >
  { sb.append(t.toString()); }
  | t = < FLOATING_POINT_LITERAL >
  { sb.append(t.toString()); }
  )
| str = var_indentifier()
   "="
 { sb.append(" valueDouble == "); }
  ("-" { sb.append("-"); } )?
  (
    t = < INTEGER_LITERAL >
  { sb.append(t.toString()); }
  | t = < FLOATING_POINT_LITERAL >
  { sb.append(t.toString()); }
  )
|
  (
    "." { sb.append(""); }
     | (t = "-" { sb.append("-"); })?
     (
     t = < INTEGER_LITERAL >
     | t = < FLOATING_POINT_LITERAL >
     )
     { sb.append(t.toString() + " < valueDouble &&"); }
   ) < LESSTHAN > str = var_indentifier() < LESSTHANOREQUALTO >
     { sb.append(" valueDouble <= "); }
    ("-" { sb.append("-"); })?
    ( t = < INTEGER_LITERAL >
    { if(Double.valueOf(t.toString()) >= 2147483648D)sb.append(t.toString().trim() + "D");
	  else  sb.append(t.toString().trim() + ""); }
    | t = < FLOATING_POINT_LITERAL >
    { sb.append(t.toString()); }
    ))

  { return sb.toString(); }
}

String stringvalue_desc(IfStatement ifstatement) :
{
  StringBuilder sb = new StringBuilder();
  Token t;
}
{  
  (
  "=" t = <CHARACTER_LITERAL>
//  { sb.append(" (value.equals("+"\"" + charTrim(t.toString()).trim() + "\""+")) "); }
{ifstatement.type="string"; sb.append(" Arrays.asList("+"\"" + charTrim(t.toString()).trim() + "\""+").contains(value) "); }
  | < IN > < LPARENTHESIS >
  {sb.append("Arrays.asList( "); }
   (     t = < CHARACTER_LITERAL > {sb.append("\"" + charTrim(t.toString()).trim() + "\""); ifstatement.type="string";}
   | t = < STRING_LITERAL > { sb.append("\"" + charTrim(t.toString()).trim() + "\""); ifstatement.type="string";}
   | t = < FLOATING_POINT_LITERAL > { sb.append( t.toString().trim()); ifstatement.type="numeric";}
   | t = < INTEGER_LITERAL > { sb.append(t.toString().trim()); ifstatement.type="numeric";}
   | t = "." { sb.append("null"); }
   )
   ( ","
   {sb.append(",");}
     ( t = <CHARACTER_LITERAL> { sb.append("\"" + charTrim(t.toString()).trim() + "\""); ifstatement.type="string";}
     | t = < STRING_LITERAL > { sb.append("\"" + charTrim(t.toString()).trim() + "\""); ifstatement.type="string";}  
	 | ("-" { sb.append("-");})?  t = < FLOATING_POINT_LITERAL > { sb.append(t.toString().trim()); ifstatement.type="numeric";}
     | ("-" { sb.append("-");})?  t = < INTEGER_LITERAL > { sb.append(t.toString().trim()); ifstatement.type="numeric";}
     ) )*
     < RPARENTHESIS >
  	 { sb.append(")" + ".contains(value) "); }
 )

 { return sb.toString().trim(); }
}

