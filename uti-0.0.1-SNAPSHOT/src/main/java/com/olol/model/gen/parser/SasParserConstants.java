/* Generated By:JavaCC: Do not edit this line. SasParserConstants.java */
package com.olol.model.gen.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SasParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 8;
  /** RegularExpression Id. */
  int HEX_LITERAL = 9;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 10;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 11;
  /** RegularExpression Id. */
  int EXPONENT = 12;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 13;
  /** RegularExpression Id. */
  int STRING_LITERAL = 14;
  /** RegularExpression Id. */
  int CONTINUE = 15;
  /** RegularExpression Id. */
  int VOLATILE = 16;
  /** RegularExpression Id. */
  int REGISTER = 17;
  /** RegularExpression Id. */
  int IF = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int THEN = 20;
  /** RegularExpression Id. */
  int OR = 21;
  /** RegularExpression Id. */
  int IN = 22;
  /** RegularExpression Id. */
  int LABEL = 23;
  /** RegularExpression Id. */
  int INTERCEPT = 24;
  /** RegularExpression Id. */
  int LCURLYBRACE = 25;
  /** RegularExpression Id. */
  int RCURLYBRACE = 26;
  /** RegularExpression Id. */
  int LSQUAREBRACKET = 27;
  /** RegularExpression Id. */
  int RSQUAREBRACKET = 28;
  /** RegularExpression Id. */
  int LPARENTHESIS = 29;
  /** RegularExpression Id. */
  int RPARENTHESIS = 30;
  /** RegularExpression Id. */
  int PLUS = 31;
  /** RegularExpression Id. */
  int MINUS = 32;
  /** RegularExpression Id. */
  int MULTIPLY = 33;
  /** RegularExpression Id. */
  int DIVIDE = 34;
  /** RegularExpression Id. */
  int EQUAL = 35;
  /** RegularExpression Id. */
  int NOTEQUAL = 36;
  /** RegularExpression Id. */
  int LESSTHAN = 37;
  /** RegularExpression Id. */
  int GREATERTHAN = 38;
  /** RegularExpression Id. */
  int LESSTHANOREQUALTO = 39;
  /** RegularExpression Id. */
  int GREATERTHANOREQUALTO = 40;
  /** RegularExpression Id. */
  int IDENTIFIER = 41;
  /** RegularExpression Id. */
  int LETTER = 42;
  /** RegularExpression Id. */
  int DIGIT = 43;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"continue\"",
    "\"volatile\"",
    "\"register\"",
    "\"if\"",
    "\"else\"",
    "\"then\"",
    "\"or\"",
    "\"in\"",
    "\"label\"",
    "\"intercept\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"=\"",
    "\".\"",
    "\";\"",
    "\",\"",
  };

}
